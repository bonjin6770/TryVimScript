"=============================================================================
" 演算子
"=============================================================================

"************************************************************
" 比較演算子
"************************************************************
" ==
" !=
" >
" >=
" <
" <=
"
" これらの意味は、一般的な言語と同様。
" 数値同士の場合は数値比較。
" 文字列同士の場合は文字列比較。
"
" 文字列と数値を比較した場合、文字列が数値に変換され、数値として比較される。
"
" 文字列同士を比較する場合、大文字と小文字を区別するかはVimのignorecaseオプションに左右される。
" このオプションを無視して比較するには以下の演算子を使う。
"
" ・大文字小文字を区別する
" ==#
" !=#
" >#
" >=#
" <#
" <=#
"
" ・大文字小文字を無視する
" ==?
" !=?
" >?
" >=?
" <?
" <=?
"
" 正規表現マッチをするには以下の演算子を使う。
" ・正規表現マッチ
" =~
" =~#
" =~?
" ・正規表現非マッチ
" !~
" !~#
" !~?
"

" ==と!=はリストや辞書の同値性テストに使える。
let res = [1, 2, 3] == [1, 2, 3]
" echo res

" is と isnot演算子は、数値や文字列の場合は型比較を行わない厳格な比較をします。
" リストや辞書の場合は同一性テストをします。
let res = 1 is '1'
" echo res

let res = 1 is 1
" echo res

let list = [0, 1]
let res = list is [0, 1]
" echo res

let res = list is list
" echo res

"************************************************************
" 論理演算子
"************************************************************
" 俗に言う短絡演算子、ショートサーキット演算子。
" 結果は真偽値を表す0か1に変換される。
let a = 10 || 0
" echo a

let a = 10 && 5
" echo a

let a = 10 && 0
" echo a

"************************************************************
" 条件演算子
"************************************************************
" 一般的には演算子と呼ばれる
let cond = 1
" echo cond ? 'true' : 'false'
